/*
 * The MIT License
 *
 * Copyright 2015 Diego Geronimo D' Onofre.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package erpsystem.forms;

import erpsystem.model.MovProd;
import erpsystem.model.MovProdDB;
import erpsystem.model.PessoaMov;
import erpsystem.util.Log;
import erpsystem.util.Util;

import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Diego
 */

public class ConsultaMovView extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaMovView
     */
    public ConsultaMovView() {
        initComponents();
        java.awt.Point p = Util.getCenterPoint(this.getWidth(), this.getHeight());
        this.setLocation(p);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setTitle("Consulta Movimentações");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovs = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblProds = new javax.swing.JTable();
        lblMov = new javax.swing.JLabel();
        lblProdMov = new javax.swing.JLabel();
        btnFindCli = new javax.swing.JButton();
        tfdClient = new javax.swing.JTextField();
        lblClient = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblValorTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblMovs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome do Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMovs.setColumnSelectionAllowed(true);
        tblMovs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMovsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMovs);
        tblMovs.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        tblProds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Quantidade", "Valor Unitário", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProds.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(tblProds);
        tblProds.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        lblMov.setText("Movimentações");

        lblProdMov.setText("Produtos da Movimentação");

        btnFindCli.setText("Procurar");
        btnFindCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCliActionPerformed(evt);
            }
        });

        tfdClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfdClientKeyPressed(evt);
            }
        });

        lblClient.setText("Nome Pessoa");

        lblTotal.setText("Total Geral:");

        lblValorTotal.setText("Value");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfdClient, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFindCli)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblMov)
                            .addComponent(lblProdMov)
                            .addComponent(lblClient))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTotal)
                .addGap(52, 52, 52)
                .addComponent(lblValorTotal)
                .addGap(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblClient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfdClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindCli))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMov)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProdMov)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(lblValorTotal))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final static Object[] colMovs = new Object[]{"Código",
                                                         "Nome Pessoa",
                                                         "Tipo",
                                                         "Forma Pag.",
                                                         "Data",
                                                         "Hora"
                                                         };
        
    private final static Object[] colProds = new Object[]{"Código",
                                                          "Descrição",
                                                          "Quantidade",
                                                          "Valor Unit R$",
                                                          "Total R$",
                                        };
    
    final TableModel emptyMovsModel = new XTableModel(new Object[0][colMovs.length], colMovs);
    
    final TableModel emptyProdsModel = new XTableModel(new Object[0][colProds.length], colProds);
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        initTabs();
        initObjects();  
    }//GEN-LAST:event_formWindowOpened

    private void initObjects()
    {
        lblValorTotal.setText("R$ 0.00"); 
    }
    
    private void calcTotalValue()
    {
        TableModel mt = tblProds.getModel();
        double totalValue = 0;
        
        for ( int i = 0; i < mt.getRowCount(); i++ ){
            double value = (double) mt.getValueAt(i, TOTAL);
            totalValue += value;
        }
        
        lblValorTotal.setText("R$ " + totalValue);
    }
    
    private void fillMovs(java.util.List<PessoaMov> cmList)
    {
        TableModel newModel = new XTableModel(colMovs, cmList.size());
        
        for ( int i = 0; i < cmList.size(); i++ ){
            PessoaMov cm = cmList.get(i);
            
            final int movCod  = cm.getMovCod();
            
            
            //******************************************************************************************
            
            
            // início do script para formatação de data e hora
            
            //Criando o calendar
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(cm.getData());
            
            //Formatando a data como dd/mm/aa
            final int dd = calendar.get(Calendar.DAY_OF_MONTH);
            
            //Segundo a documentação do Calendar o primeiro mês
            //é 0 (zero), por isso é necessário adicionar + 1 para
            // que fique compatível com o brasil. Janeiro é 0, Fevereiro é 1...
            
            final int mm = calendar.get(Calendar.MONTH) + 1;
            final int aa = calendar.get(Calendar.YEAR);
            
            String data  = ( dd <= 9? "0" + dd: dd ) + ":"
                         + ( mm <= 9? "0" + mm: mm ) + ":"
                         + ( aa );
            
            //Formatando a hora como hh/mm/ss
            final int minute  = calendar.get(Calendar.MINUTE);
            final int second  = calendar.get(Calendar.SECOND);
            final int hour    = calendar.get(Calendar.HOUR_OF_DAY);
            
            String hora       = ( hour   <= 9 ? "0" + hour   : hour   ) + ":" 
                              + ( minute <= 9 ? "0" + minute : minute ) + ":" 
                              + ( second <= 9 ? "0" + second : second );
            
            
            // fim do script para formatação de data e hora
            
            //******************************************************************************************
            
            
            String clientName = cm.getClientName();
            
            final int type = cm.getType();
            final int payMethod = cm.getPayMethod();
            
            erpsystem.model.PayMethod payMethodObj = erpsystem.model.PayMethodDB.find(payMethod);
            
            if (payMethodObj != null){
                String payMethodValue = payMethodObj.getDescricao();
                String tt = (type == MovView.COMPRA_VALUE?MovView.COMPRA:MovView.VENDA);

                newModel.setValueAt(movCod,         i, MOV_COD);
                newModel.setValueAt(clientName,     i, CLIENT_NAME);
                newModel.setValueAt(tt,             i, TYPE);
                newModel.setValueAt(payMethodValue, i, PAY_METHOD);
                newModel.setValueAt(data,           i, DATA);
                newModel.setValueAt(hora,           i, HORA);
            }
            else
                Log.log(new Exception("Problema 5448"));
        }
        
        tblMovs.setModel(newModel);
        tblMovs.getColumnModel().getColumn(MOV_COD).setMinWidth(0);  
        tblMovs.getColumnModel().getColumn(MOV_COD).setMaxWidth(0);
    }
    
    static final int MOV_COD     = 0;
    static final int CLIENT_NAME = 1;
    static final int TYPE        = 2;
    static final int PAY_METHOD  = 3;
    static final int DATA        = 4;
    static final int HORA        = 5;   
        
    static final int COD_PROD = 0;
    static final int DESC     = 1;
    static final int QT       = 2;
    static final int PRECO    = 3;
    static final int TOTAL    = 4;    

    private void fillProds(java.util.List<MovProd> mpList)
    {
        TableModel newModel = new XTableModel(colProds, mpList.size());
        
        for ( int i = 0; i < mpList.size(); i++ ){
            MovProd mp = mpList.get(i);
            final int movCod   = mp.getCodProd();
            String desc        = mp.getDesc();
            final int qt       = mp.getQt();
            final double preco = mp.getPreco();
            
            newModel.setValueAt(movCod,     i, COD_PROD);
            newModel.setValueAt(desc,       i, DESC);
            newModel.setValueAt(qt,         i, QT);
            newModel.setValueAt(preco,      i, PRECO);
            newModel.setValueAt(qt * preco, i, TOTAL);
        }
        
        tblProds.setModel(newModel);
        tblProds.getColumnModel().getColumn(COD_PROD).setMinWidth(65);
        tblProds.getColumnModel().getColumn(COD_PROD).setMaxWidth(65);
    }
    
    private void search()
    {
        initTabs();
        String clientName = tfdClient.getText();
        java.util.List<erpsystem.model.PessoaMov> cmList = business.ConsultaMov.findClientMov(clientName);
        
        if ( cmList != null )
            fillMovs(cmList);
        else
            Util.msg("Nenhum registro encontrado.");    
    }
    
    private void btnFindCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCliActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_btnFindCliActionPerformed

    private void tblMovsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMovsMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblMovs.getSelectedRow();
        int movCod = (int) tblMovs.getModel().getValueAt( selectedRow, MOV_COD);
        java.util.List<erpsystem.model.MovProd> mpList = MovProdDB.findProds(movCod);
        
        if ( mpList != null ){
            fillProds(mpList);
            calcTotalValue();
        }
    }//GEN-LAST:event_tblMovsMouseClicked

    private void tfdClientKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdClientKeyPressed
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        
        if ( code == KeyEvent.VK_ENTER )
            search();
    }//GEN-LAST:event_tfdClientKeyPressed

    private void initTabs()
    {
        initTblMovs();
        initTblProds();
    }
    
    private void initTblMovs()
    {   
        //Bloqueando a reordenação das colunas
        tblMovs.getTableHeader().setReorderingAllowed(false);
        //Evitando seleção múltipla
        tblMovs.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
        tblMovs.setModel(emptyMovsModel);
        
        tblMovs.getColumnModel().getColumn(MOV_COD).setMinWidth(0);  
        tblMovs.getColumnModel().getColumn(MOV_COD).setMaxWidth(0);
        tblMovs.setDefaultRenderer(Object.class, Util.getDefaultCellRenderer());
    }
    
    private void initTblProds()
    {
        //Bloqueando a reordenação das colunas
        tblProds.getTableHeader().setReorderingAllowed(false);
        //Evitando seleção múltipla
        tblProds.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  
        tblProds.setModel(emptyProdsModel);
        tblProds.getColumnModel().getColumn(COD_PROD).setMinWidth(65);
        tblProds.getColumnModel().getColumn(COD_PROD).setMaxWidth(65);
        tblProds.setDefaultRenderer(Object.class, Util.getDefaultCellRenderer());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaMovView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaMovView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaMovView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaMovView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaMovView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindCli;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblMov;
    private javax.swing.JLabel lblProdMov;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblValorTotal;
    private javax.swing.JTable tblMovs;
    private javax.swing.JTable tblProds;
    private javax.swing.JTextField tfdClient;
    // End of variables declaration//GEN-END:variables
}
